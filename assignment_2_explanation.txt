My asthetic goals were to create a "fluid flow" simulation that would be overlaid on top of the image from the camera. Origionally, I wanted the fluid to flow around the edges of the image detected. I had a version of this working, however, I realized that the only real way to make the flow look nice would be to either a) use a huge kernel for gradient calculation or b) use a gaussian blur over the image before calculating the partial derivitaves. Usually, I would do B, however, I didn't see an easy way to add a new render target stage into seagulls. A was probably feasable but would have been slow and tedious to write. So, instead, I dropped the "edge detection" part, and simply moved the image according to the curl of a perlin noise field.

The curl is calculated by rotating the gradient (vector of partial derivatives) by 90 degrees to the right. This curl is then used as an offset to sample the last frame from the backbuffer, creating the appearance that pixels flow along lines in the vector field created by the noise. The speed of the flow is adjusted by multiplying the curl vector by a scalar to adjust how "far back" the curl vector offsets the sample. The noise is adjustable both in scale and in octaves. The octaves of the noise are all perlin noise, repeatedly scaled by 2 and reduced in amplitude by 2.
